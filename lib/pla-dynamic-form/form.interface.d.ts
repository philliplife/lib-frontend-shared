export declare class TYPE {
    static readonly TEXT = "text";
    static readonly NUMBER = "number";
    static readonly DECIMAL = "decimal";
    static readonly INPUTGROUP = "input-group";
    static readonly SELECTBUTTON = "select-button";
    static readonly TEXTAREA = "textarea";
    static readonly DROPDOWN = "dropdown";
    static readonly SELECT = "select";
    static readonly RADIO = "radio";
    static readonly MULTISELECT = "multiselect";
    static readonly CHECKBOX = "checkbox";
    static readonly EMPTY = "empty";
    static readonly DATEPICKER = "datepicker";
    static readonly TOGGLESWITCH = "toggleswitch";
}
export interface ICommonData {
    code: string | number | string[];
    name?: string;
    name_En?: string;
    desc?: string;
    icon?: string;
    id?: string;
    disabled?: boolean;
}
export interface IFormControlDynamic {
    type?: 'text' | 'number' | 'decimal' | 'textarea' | 'dropdown' | 'empty' | 'select' | 'datepicker' | 'toggleswitch' | 'radio' | 'multiselect' | 'checkbox' | 'input-group' | 'select-button';
    value?: any;
    formControlName?: string;
    subFormControlName?: string;
    selectControlName?: string;
    placeholder?: string;
    label?: string;
    rangeLabel?: string[];
    class?: string;
    readOnly?: true;
    classIcon?: string;
    fluid?: boolean;
    hidden?: boolean;
    isViewMode?: boolean;
    loading?: boolean;
    dataLabel?: string;
    data?: ICommonData[];
    optionLabel?: any;
    optionValue?: any;
    filter?: boolean;
    clear?: boolean;
    display?: string;
    maxSelectedLabels?: number | null;
    disableToggleAll?: boolean;
    min?: number;
    max?: number;
    digit?: number;
    msgMaxLength?: string;
    msgMinLength?: string;
    msgRequired?: string;
    msgPattern?: string;
    msgCustom?: string;
    suffix?: string;
    prefix?: string;
    cols?: number;
    rows?: number;
    dateFormat?: string;
    showTime?: boolean;
    hourFormat?: string;
    minDate?: string;
    maxDate?: string;
    selectionMode?: 'single' | 'multiple' | 'range';
    readonlyInput?: boolean;
    showButtonBar?: boolean;
    stateOptions?: any[];
    onBlur?: Function;
    onChange?: Function;
    onHide?: Function;
    completeMethod?: Function;
    onKeyup?: Function;
    onClick?: Function;
    fieldGroup?: string;
    disabled?: boolean;
    onFilter?: Function;
    input?: Function;
    appCharCount?: boolean;
    inputTypeCount?: 'input' | 'textarea';
    floatingSuffix?: string;
    trueValue?: any;
    falseValue?: any;
}
